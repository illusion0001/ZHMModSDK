name: Build

on:
  push:
    branches:
      - master
  release:
    types: [ created ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build
    runs-on: [ windows-latest ]

    steps:
    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    - name: Checkout
      uses: actions/checkout@main
      with:
        submodules: recursive

    - name: Setup VS environment
      run: |
        $installationPath = vswhere.exe -prerelease -latest -property installationPath
        if ($installationPath -and (test-path "$installationPath\Common7\Tools\vsdevcmd.bat"))
        {
            & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo && set" | foreach-object {
                $name, $value = $_ -split '=', 2
                echo "$name=$value" >> ${{ github.env }}
                # set-content env:\"$name" $value
            }
        }
    - name: Build and install debug
      run: |
        cmake -G "Ninja"  -DCMAKE_INSTALL_PREFIX:STRING="${{ github.workspace }}/_install/x64-Debug" -DCMAKE_CXX_COMPILER:STRING="cl.exe" -DCMAKE_TOOLCHAIN_FILE:FILEPATH="${{ github.workspace }}/External/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_OVERLAY_TRIPLETS:STRING="${{ github.workspace }}/cmake/vcpkg-overlays" -DVCPKG_TARGET_TRIPLET:STRING="x64-windows-zhm" -DVCPKG_HOST_TRIPLET:STRING="x64-windows-zhm" -DCMAKE_VERBOSE_MAKEFILE:BOOL="FALSE" -DCMAKE_POLICY_DEFAULT_CMP0091:STRING="NEW" -DCMAKE_BUILD_TYPE:STRING="Debug" -DCMAKE_MSVC_RUNTIME_LIBRARY:STRING="MultiThreadedDebug" -DCMAKE_MAKE_PROGRAM="ninja" "${{ github.workspace }}"
        #cmake --preset x64-Debug .
        cmake --build _build/x64-Debug -j12
        cmake --install _build/x64-Debug

    - name: Build and install release
      run: |
        cmake --preset x64-Release .
        cmake --build _build/x64-Release -j12
        cmake --install _build/x64-Release

    - name: Copy debug artifacts
      run: |
        mkdir _dist-debug
        Copy-Item _install/x64-Debug/bin/* -Destination _dist-debug/ -Recurse
        Copy-Item _install/x64-Debug/licenses -Destination _dist-debug/ -Recurse
        Copy-Item LICENSE -Destination _dist-debug/LICENSE

    - name: Copy release artifacts
      run: |
        mkdir _dist-release
        Copy-Item _install/x64-Release/bin/* -Destination _dist-release/ -Recurse
        Copy-Item _install/x64-Release/licenses -Destination _dist-release/ -Recurse
        Copy-Item LICENSE -Destination _dist-release/LICENSE

    - name: Copy SDK dev artifacts
      run: |
        mkdir _sdk
        Copy-Item cmake/sdk-dist.cmake -Destination _sdk/CMakeLists.txt
        Copy-Item _install/x64-Release/include -Destination _sdk/ -Recurse
        
        mkdir _sdk/release
        Copy-Item _install/x64-Release/lib -Destination _sdk/release/ -Recurse
        Copy-Item _install/x64-Release/bin -Destination _sdk/release/ -Recurse
        Remove-Item _sdk/release/bin/mods -Recurse
        Remove-Item _sdk/release/bin/dinput8.dll
        Remove-Item _sdk/release/bin/ResourceLib_HM3.dll
        
        mkdir _sdk/debug
        Copy-Item _install/x64-Debug/lib -Destination _sdk/debug/ -Recurse
        Copy-Item _install/x64-Debug/bin -Destination _sdk/debug/ -Recurse
        Remove-Item _sdk/debug/bin/mods -Recurse
        Remove-Item _sdk/debug/bin/dinput8.dll
        Remove-Item _sdk/debug/bin/ResourceLib_HM3.dll
        
        mkdir _sdk/cmake
        Copy-Item cmake/zhm-mod.cmake -Destination _sdk/cmake/zhm-mod.cmake
        
        Copy-Item _install/x64-Release/licenses -Destination _sdk/ -Recurse
        Copy-Item LICENSE -Destination _sdk/LICENSE

    - name: Archive debug SDK and mods
      uses: actions/upload-artifact@main
      with:
        name: ZHMModSDK-Debug
        path: _dist-debug/*

    - name: Archive release SDK and mods
      uses: actions/upload-artifact@main
      with:
        name: ZHMModSDK-Release
        path: _dist-release/*

    - name: Archive SDK dev package
      uses: actions/upload-artifact@main
      with:
        name: DevPkg-ZHMModSDK
        path: _sdk/*

  upload_release:
    name: Upload release artifacts
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        artifact:
        - ZHMModSDK-Release
        - ZHMModSDK-Debug
        - DevPkg-ZHMModSDK

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}

    - name: Archive artifact files
      run: |
        cd ${{ matrix.artifact }}
        zip -r ${{ matrix.artifact }}.zip *
        
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ matrix.artifact }}/${{ matrix.artifact }}.zip
        asset_name: ${{ matrix.artifact }}.zip
        asset_content_type: application/zip
